dts_fmts <-
#vector_parse_date_first_clean(dts) %>%
tidyr::expand_grid(dts_orig = dts, fmt = fmts) %>%
dplyr::mutate(dts = vector_parse_date_first_clean(dts_orig))
dts_fmts["valid_dts"] <-
#purrr::map2(dts_fmts$dts, dts_fmts$fmt, vector_parse_date_possibl_correct_format, check_func = check_func, ... = ...) %>% unlist()
as.POSIXct(purrr::map2(dts_fmts$dts, dts_fmts$fmt, vector_parse_date_only_one, check_func = check_func, ... = ...) %>% unlist(), origin = "1970-01-01", tz = "GMT")
dts_fmts["valid_fmt"] <-
as.double(purrr::map2(dts_fmts$dts, dts_fmts$fmt, vector_parse_date_possibl_correct_format, check_func = check_func, ... = ...) %>% unlist())
dts_fmts %>%
dplyr::group_by(dts_orig, fmt) %>% dplyr::mutate(n = dplyr::n()) %>% dplyr::ungroup() %>% #dplyr::filter(dts_orig == "Junk")
dplyr::group_by(fmt) %>% dplyr::mutate(fmt_sum = sum(valid_fmt))%>% dplyr::ungroup() %>%
dplyr::arrange(dplyr::desc(fmt_sum)) %>% dplyr::select(-fmt_sum) %>%
dplyr::group_by(dts_orig) %>% dplyr::mutate(valid_fmt = sum(valid_fmt)/n) %>% dplyr::ungroup() %>%
tidyr::pivot_wider(names_from = 'fmt', values_from = 'valid_dts', values_fill  = as.POSIXct(NA), values_fn = mean ) %>%
dplyr::arrange(dplyr::desc(n)) %>%
dplyr::select(-dts)
}
#' returns a tibble with formats tried and success rate of format in aggregate
#'
#' @param dts vector of strings
#' @param fmts optional vector of formats to check
#' @param check_func function that takes a date and returns 1 if if matches some business logic for a valid date
#'
#' @export
vector_parse_success_rates <- function(dts,
fmts= vector_parse_date_formats(),
check_func = vector_parse_date_not_future,
...){
dts_fmts <-
vector_parse_date_first_clean(dts) %>%
tidyr::expand_grid(dts = ., fmt = fmts)
dts_fmts["valid_fmt"] <-
purrr::map2(dts_fmts$dts, dts_fmts$fmt, vector_parse_date_possibl_correct_format, check_func = check_func, ... = ...) %>% unlist()
fmts_summary <-
dts_fmts %>%
#dplyr::filter(valid_fmt == 1) %>%
#dplyr::count(fmt, valid_fmt, sort = TRUE)
dplyr::group_by(fmt) %>%
dplyr::summarise(n = sum(valid_fmt)) %>%
dplyr::arrange(desc(n))
return(fmts_summary)
}
#' returns a string for the best guess date, if there is no best guess it return an empty string
#'
#' @param dts vector of strings
#' @param fmts optional vector of formats to check
#' @param check_func function that takes a date and returns 1 if if matches some business logic for a valid date
#'
#' @export
vector_parse_dates_guess_at_format <- function(dts,
fmts= vector_parse_date_formats(),
check_func = vector_parse_date_not_future,
...){
fmts_summary <- vector_parse_success_rates(dts = dts, fmts = fmts, check_func = check_func, ... = ...)
if (nrow(fmts_summary) == 1){
return(fmts_summary %>% dplyr::pull(fmt))
}
if (nrow(fmts_summary) == 0){
return('')
}
if (nrow(fmts_summary) > 1){
ns <- fmts_summary %>% dplyr::pull(n)
if (ns[1] > ns[2]){
return(fmts_summary %>% utils::head(1) %>% dplyr::pull(fmt))
}else{
return('')
}
}
return('')
}
#' given a vector of dates this will try to parse them using vector of formats, and then parse them as best it can using information on if the other dates parse in a given format
#'
#' @param dts vector of strings
#' @param fmts optional vector of formats to check
#' @param check_func function that takes a date and returns true if if matches some business logic for a valid date
#'
#' @export
vector_parse_dates <- function(dts,
fmts = vector_parse_date_formats(),
check_func = vector_parse_date_not_future,
...){
best_guess_format <- vector_parse_dates_guess_at_format(dts = dts, fmts = fmts, check_func = check_func,  ... = ...)
dts2 <- vector_parse_date_first_clean(dts)
purrr::map(dts2,vector_parse_date_only_one, fmt = best_guess_format, check_func = check_func, ... = ...) %>%
purrr::reduce(c)
}
source('C:/Users/hswerdfe/Projects/vectorParseDate/R/vector_parse_date.R', echo=TRUE)
dt_v_1 <- c("03/03/92", "03/21/94", "03/02/99", "03/07/02")
dt_v_2 <- c("03/03/2092", "03/21/2094", "03/02/2099", "03/07/2002")
dt_v_3 <- c("03/03/2092", "03/21/2094", "03/02/2099", "03/07/2002", '03/25/2002')
dt_v_8 <- c('2011/01/21', '2011/01/21', '2011/01/02', '2011/01/22')
dt_v_4 <- c("03/03/2092", "03/21/2094", "03/02/2099", "03/07/2002")
dt_v_5 <- c("2011/01/21", "2011/02/22", "2011/01/04", "Junk", NA)
dt_v_6 <- c("2011/21/01", "2011/22/2", "2011/4/1", "Junk", NA)
dt_v_7 <- c("20112101", "2011222", "201141", "Junk", NA)
dt_v_8 <- c('2011/01/21', '2011/01/21', '2011/01/02', '2011/01/22')
dt_v_9 <- c('2021/03/02', '2021/03/01', '2020-11-11')
devtools::load_all()
devtools::load_all()
dts = c("03/03/92", "03/21/94", "03/02/99", "03/07/02")
vectorParseDate::vector_parse_dates(dts)
devtools::load_all()
devtools::install("vectorParseDate")
devtools::document()
devtools::install("vectorParseDate")
devtools::install("vectorParseDate")
devtools::install(pkg = "C:\Users\hswerdfe\Projects\vectorParseDate\")
devtools::install(pkg = "C:/Users/hswerdfe/Projects/vectorParseDate")
library(vectorParseDate)
library(vectorParseDate)
dts = c("03/03/92", "03/21/94", "03/02/99", "03/07/02")
vectorParseDate::vector_parse_dates(dts)
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise()
cat("Package: VectorParseDate\n", file = "DESCRIPTION")
roxygen2::roxygenise()
cat("Version: 1.0.0\n", file = "DESCRIPTION", append = TRUE)
roxygen2::roxygenize()
devtools::document()
devtools::install(pkg = "C:/Users/hswerdfe/Projects/vectorParseDate")
dts = c("03/03/92", "03/21/94", "03/02/99", "03/07/02")
vectorParseDate::vector_parse_dates(dts)
devtools::load_all()
dt_v_9 <- c('2021/03/02', '2021/03/01', '2020-11-11')
dt_v_1 <- c("03/03/92", "03/21/94", "03/02/99", "03/07/02")
vector_parse_dates_guess_at_format(dt_v_1)
dts = dt_v_1
fmts= vector_parse_date_formats()
check_func = vector_parse_date_not_future
roxygen2::roxygenize()
devtools::install(pkg = "C:/Users/hswerdfe/Projects/vectorParseDate")
install.packages("RDCOMClient")
install.packages("RDCOMClient", repos = "http://www.omegahat.net/R")
# Load the DCOM library
library (RDCOMClient)
# Open Outlook
Outlook <- COMCreate("Outlook.Application")
# Create a new message
Email = Outlook$CreateItem(0)
# Set the recipient, subject, and body
Email[["to"]] = "howard.swerdfeger@canada.ca; najmus.saqib@canada.ca"
Email[["cc"]] = ""
Email[["bcc"]] = ""
Email[["subject"]] = "Test Send from R on Laptop"
Email[["htmlbody"]] =
"<h1>Quarterly Sales Analysis</h1>
<p>The quarterly sales analysis has been updated.</p>
<p>You can find it at
<a href='file:\\\D:\\Reports\\Sales Analysis.xlsx'>
D:\\Reports\\Sales Analysis.xlsx
</a>
</p>"
Email[["subject"]] = "Test Send from R on Laptop"
Email[["htmlbody"]] =
"<h1>Quarterly Sales Analysis</h1>
<p>The quarterly sales analysis has been updated.</p>
<p>You can find it at
<a href='file:\\\D:\\Reports\\Sales Analysis.xlsx'>
D:\\Reports\\Sales Analysis.xlsx
</a>
</p>"
Email[["htmlbody"]] =
"<h1>Quarterly Sales Analysis</h1>
<p>The quarterly sales analysis has been updated.</p>
<p>bla bla
</a>
</p>"
# Send the message
Email$Send()
# Close Outlook, clear the message
rm(Outlook, Email)
c("asdf", "qwer") %>% paste0(collapse = " ; ")
c("asdf", "qwer") %>% paste0(collapse = "; ")
source('C:/Users/hswerdfe/Projects/vectorParseDate/R/vector_parse_date.R')
vector_parse_dates( c("03/03/92", "03/21/94", "03/02/99", "03/07/02"))
vector_parse_dates( c("03/03/92", "03/21/94", "03/02/99", "03/07/02"))
source('C:/Users/hswerdfe/Projects/vectorParseDate/R/vector_parse_date.R')
vector_parse_dates( c("03/03/92", "03/21/94", "03/02/99", "03/07/02"))
vector_parse_dates(dts=c("03/03/92", "03/21/94", "03/02/99", "03/07/02"))
vector_parse_dates_guess_at_format(dts=c("03/03/92", "03/21/94", "03/02/99", "03/07/02"))
vector_parse_success_rates(dts=c("03/03/92", "03/21/94", "03/02/99", "03/07/02"))
vector_parse_success_rates(dts=c("03/03/92", "03/21/94", "03/02/99", "03/07/02"))
vector_parse_success_grid(dts=c("03/03/92", "03/21/94", "03/02/99", "03/07/02"))
vector_parse_date_possibl_correct_format(dt_str="03/03/92", fmt="ymd")
vector_parse_date_possibl_correct_format(dt_str="03/03/92", fmt="mdy")
vector_parse_date_possibl_correct_format(dt_str="03/03/92", fmt="ymd")
vector_parse_date_possibl_correct_format(dt_str="03/03/92", fmt="mdy")
vector_parse_date_possibl_correct_format(dt_str="03/03/92", fmt="mdy")
vector_parse_date_possibl_correct_format(dt_str="03/03/92", fmt="mdy")
vector_parse_date_possibl_correct_format(dt_str="03/03/92", fmt="ymd")
vector_parse_date_only_one(dt_str="03/03/92", fmt="mdy")
vector_parse_date_only_one(dt_str="03/03/92", fmt="ymd")
vector_parse_recent_better(as.Date("2021-01-17"))
as.Date("2021-01-17")
vector_parse_date_not_future(as.Date("2021-01-17"))
vector_parse_date_not_future(as.Date("2037-01-17"))
as.Date("2037-01-17")
vector_parse_date_usually_true(as.Date("2021-01-17"))
vector_parse_date_usually_true(as.Date("2037-01-17"))
vector_parse_date_usually_true(as.Date("1282-03-27"))
as.Date("1282-03-27")
vector_parse_date_first_clean( c("03/03/92", "03/21/94", "03/02/99", "03/07/02"))
vector_parse_date_formats()
as.Date("1282-03-27")
as.Date("1282-03-27")
as.Date("1282-03-27")
format(as.Date("1282-03-27"), "%b-%y")
format(as.Date("1982-03-27"), "%m-%b-%y")
format(as.Date("1982-03-27"), "%d-%b-%y")
date_v <- format(as.Date(sample( as.numeric(as.Date('2015-01-01')): as.numeric(as.Date('2015-01-05')), 10, replace = T), origin = '1970-01-01'), "%Y-%m-%d")
vector_parse_dates(date_v)
date_v <- format(as.Date(sample( as.numeric(as.Date('2015-01-01')): as.numeric(as.Date('2015-01-31')), 10, replace = T), origin = '1970-01-01'), "%Y-%m-%d")
vector_parse_dates(date_v)
date_v <- format(as.Date(sample( as.numeric(as.Date('2035-01-13')): as.numeric(as.Date('2035-01-31')), 5, replace = T), origin = '1970-01-01'), "%Y-%m-%d")
vector_parse_dates(date_v)
date_v
source('C:/Users/hswerdfe/Projects/vectorParseDate/R/vector_parse_date.R')
source('C:/Users/hswerdfe/Projects/vectorParseDate/R/vector_parse_date.R')
source('C:/Users/hswerdfe/Projects/vectorParseDate/R/vector_parse_date.R')
date_v <- format(as.Date(sample( as.numeric(as.Date('2035-01-13')): as.numeric(as.Date('2035-01-31')), 5, replace = T), origin = '1970-01-01'), "%Y-%m-%d")
vector_parse_dates(date_v)
source('C:/Users/hswerdfe/Projects/vectorParseDate/R/vector_parse_date.R')
source('C:/Users/hswerdfe/Projects/vectorParseDate/R/vector_parse_date.R')
source('C:/Users/hswerdfe/Projects/vectorParseDate/R/vector_parse_date.R')
date_v <- format(as.Date(sample( as.numeric(as.Date('2035-01-13')): as.numeric(as.Date('2035-01-31')), 5, replace = T), origin = '1970-01-01'), "%Y-%m-%d")
vector_parse_dates(date_v)
date_v <- format(as.Date(sample( as.numeric(as.Date('2035-01-13')): as.numeric(as.Date('2035-01-31')), 5, replace = T), origin = '1970-01-01'), "%Y-%m-%d")
vector_parse_dates(date_v)
dts <- format(as.Date(sample( as.numeric(as.Date('2035-01-13')): as.numeric(as.Date('2035-01-31')), 5, replace = T), origin = '1970-01-01'), "%Y-%m-%d")
vector_parse_dates(dts)
fmts = vector_parse_date_formats()
check_func = vector_parse_date_not_future
best_guess_format <- vector_parse_dates_guess_at_format(dts = dts, fmts = fmts, check_func = check_func,  ... = ...)
best_guess_format <- vector_parse_dates_guess_at_format(dts = dts, fmts = fmts, check_func = check_func)
best_guess_format
dts2 <- vector_parse_date_first_clean(dts)
dts2
vector_parse_date_only_one
dt_str = dts2[1]
check_func
best_guess_format
fmt = best_guess_format
#suppressWarnings(lubridate::as_date(x, ...))
ret_dt = suppressWarnings(lubridate::parse_date_time(dt_str, fmt))
ret_dt
is.na(ret_dt)
! check_func(ret_dt, ...)
! check_func(ret_dt)
ret_dt
check_func
as.double(dt <= Sys.Date())
as.double(ret_dt <= Sys.Date())
ret_dt
check_func(ret_dt)
vector_parse_date_first_clean(dt_str)
dt_str2 = vector_parse_date_first_clean(dt_str)
dt_str2
vector_parse_date_is_two_digit_year(dt_str2, fmt)
fmt
vector_parse_date_is_two_digit_year(dt_str2, fmt)
dt_str2
dt_str = dt_str2
#dt_str = 19970422
dt_str <- vector_parse_date_first_clean(dt_str)
dt_str
index_of_year = stringr::str_locate_all(pattern ="y", string = fmt)[[1]][[1]]
index_of_year
year_a <-
tryCatch(
stringr::str_split(dt_str, pattern = sep) %>% unlist() %>%
magrittr::extract2(index_of_year) %>%
as.integer(),
error = function(e){
return(-1)
},
finally = ""
)
year_a
sep
sep = "-"
fmt
stringr::str_split(dt_str, pattern = sep) %>% unlist() %>%
magrittr::extract2(index_of_year) %>%
as.integer()
year_a <-
tryCatch(
stringr::str_split(dt_str, pattern = sep) %>% unlist() %>%
magrittr::extract2(index_of_year) %>%
as.integer(),
error = function(e){
return(-1)
},
finally = ""
)
year_a
vector_parse_date_is_two_digit_year(dt_str2, fmt)
dt_str
#dt_str = 19970422
dt_str <- vector_parse_date_first_clean(dt_str)
index_of_year = stringr::str_locate_all(pattern ="y", string = fmt)[[1]][[1]]
index_of_year
year_a <-
tryCatch(
stringr::str_split(dt_str, pattern = sep) %>% unlist() %>%
magrittr::extract2(index_of_year) %>%
as.integer(),
error = function(e){
return(-1)
},
finally = ""
)
year_a
year_a == -1
lubridate::parse_date_time(dt_str, fmt)
suppressWarnings(lubridate::parse_date_time(dt_str, fmt)) %>% lubridate::year()%>% as.integer()
vector_parse_date_is_two_digit_year(dt_str = "03-22-97", fmt = 'mdy')
vector_parse_date_is_two_digit_year(dt_str = "03-22-1997", fmt = 'mdy')
#####################################
#'
#' Internal function return true if it is 4 digit year
#'
#' @param dt_str
#' @param fmt
#' @param sep
#'
#'
#'
vector_parse_date_is_two_digit_year <- function(dt_str, fmt, sep = "-"){
#dt_str = 19970422
dt_str <- vector_parse_date_first_clean(dt_str)
index_of_year = stringr::str_locate_all(pattern ="y", string = fmt)[[1]][[1]]
year_a <-
tryCatch(
stringr::str_split(dt_str, pattern = sep) %>% unlist() %>%
magrittr::extract2(index_of_year) %>%
as.integer(),
error = function(e){
return(-1)
},
finally = ""
)
if(year_a == -1)
return(FALSE)
year_b = suppressWarnings(lubridate::parse_date_time(dt_str, fmt)) %>% lubridate::year()%>% as.integer()
return(year_a == year_b)
}
fmt
dt_str
dt_str
#vector_parse_date_is_two_digit_year(dt_str = "03-22-97", fmt = 'mdy')
#vector_parse_date_is_two_digit_year(dt_str = "03-22-1997", fmt = 'mdy')
vector_parse_date_is_two_digit_year(dt_str = "2035-01-29", fmt = 'ymd')
vector_parse_date_is_two_digit_year(dt_str = "35-01-29", fmt = 'ymd')
vector_parse_date_is_two_digit_year(dt_str = "03-22-97", fmt = 'mdy')
vector_parse_date_is_two_digit_year(dt_str = "03-22-1997", fmt = 'mdy')
vector_parse_date_is_two_digit_year(dt_str = "2035-01-29", fmt = 'ymd')
vector_parse_date_is_two_digit_year(dt_str = "35-01-29", fmt = 'ymd')
#####################################
#'
#' Internal function return true if it is 4 digit year
#'
#' @param dt_str
#' @param fmt
#' @param sep
#'
#'
#'
vector_parse_date_is_two_digit_year <- function(dt_str, fmt, sep = "-"){
#dt_str = 19970422
dt_str <- vector_parse_date_first_clean(dt_str)
index_of_year = stringr::str_locate_all(pattern ="y", string = fmt)[[1]][[1]]
year_a <-
tryCatch(
stringr::str_split(dt_str, pattern = sep) %>% unlist() %>%
magrittr::extract2(index_of_year) %>%
as.integer(),
error = function(e){
return(-1)
},
finally = ""
)
if(year_a == -1)
return(TRUE)
year_b = suppressWarnings(lubridate::parse_date_time(dt_str, fmt)) %>% lubridate::year()%>% as.integer()
return(year_a != year_b)
}
vector_parse_date_is_two_digit_year(dt_str = "03-22-97", fmt = 'mdy')
vector_parse_date_is_two_digit_year(dt_str = "03-22-1997", fmt = 'mdy')
vector_parse_date_is_two_digit_year(dt_str = "2035-01-29", fmt = 'ymd')
vector_parse_date_is_two_digit_year(dt_str = "35-01-29", fmt = 'ymd')
dts <- format(as.Date(sample( as.numeric(as.Date('2035-01-13')): as.numeric(as.Date('2035-01-31')), 5, replace = T), origin = '1970-01-01'), "%Y-%m-%d")
vector_parse_dates(dts)
vector_parse_dates(dts, check_func = vector_parse_date_usually_true)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
vector_parse_date_first_clean( c("03/03/92", "03/21/94", "03/02/99", "03/07/02"))
rm(list=ls())
load_all()
devtools::document()
?vector_parse_date_is_two_digit_year
dts = c("2018-11-01 08:30:00", "2017-09-19 08:30:00", "2017-02-28 08:30:00")
TIME_SPLIT = " "
dts
stringr::str_split(dts,pattern = TIME_SPLIT, n = 1)
TIME_SPLIT
vector_parse_date_first_clean(dts = c("2018-11-01T08:30:00", "2017-09-19T08:30:00", "2017-02-28T08:30:00"), TIME_SPLIT = " ")
stringr::str_split(dts,pattern = TIME_SPLIT, n = 1)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 1) %>%
unlist()
stringr::str_split(dts,pattern = TIME_SPLIT, n = 1) %>%
unlist()
library(magrittr)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 1) %>%
unlist()
stringr::str_split(dts,pattern = TIME_SPLIT, n = 1) %>%
unlist() %>%
stringr::str_trim()
dts
dts = c("2018-11-01T08:30:00", "2017-09-19T08:30:00", "2017-02-28T08:30:00")
TIME_SPLIT
TIME_SPLIT = 'T'
stringr::str_split(dts,pattern = TIME_SPLIT, n = 1)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 1)
str_split
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split(fruits, " and ")
library(stringr)
str_split(fruits, " and ")
stringr::str_split(dts,pattern = TIME_SPLIT)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 1)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
unlist()
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
unlist() %>%
stringr::str_trim()
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
unlist() %>%
stringr::str_trim() %>%
stringr::str_replace_all(pattern = seps, replacement = replace_sep)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
unlist()
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
magrittr::extract(1)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
magrittr::extract(1)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
purrr::map(., 1)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
purrr::map(., 1)
unlist()
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
purrr::map(., 1)
unlist() %>%
stringr::str_trim()
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
purrr::map(., 1)
unlist() %>%
stringr::str_trim()
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
purrr::map(., 1)%>%
unlist() %>%
stringr::str_trim() %>%
stringr::str_replace_all(pattern = seps, replacement = replace_sep)
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
purrr::map(., 1)%>%
unlist()
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
purrr::map(., 1)%>%
unlist() %>%
stringr::str_trim()
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
purrr::map(., 1)%>%
unlist() %>%
stringr::str_trim() %>%
stringr::str_replace_all(pattern = seps, replacement = replace_sep)
#' @param dts vecotor of date strings
#' @param TIME_SPLIT where to split to get rid of the time
#' @param seps what the date separators might be
#' @param replace_sep what to replace the seperators with
#'
#' @example
#'  vector_parse_date_first_clean( c("03/03/92", "03/21/94", "03/02/99", "03/07/02"))
#'  vector_parse_date_first_clean(dts = c("2018-11-01 08:30:00", "2017-09-19 08:30:00", "2017-02-28 08:30:00"), TIME_SPLIT = " ")
#'  vector_parse_date_first_clean(dts = c("2018-11-01T08:30:00", "2017-09-19T08:30:00", "2017-02-28T08:30:00"), TIME_SPLIT = " ")
#' @export
vector_parse_date_first_clean <- function(dts,
TIME_SPLIT = 'T',
seps = '[-.:/\\s+]',
replace_sep = "-"){
stringr::str_split(dts,pattern = TIME_SPLIT, n = 2) %>%
purrr::map(., 1)%>%
unlist() %>%
stringr::str_trim() %>%
stringr::str_replace_all(pattern = seps, replacement = replace_sep)
}
source('C:/Users/hswerdfe/Projects/vectorParseDate/R/vector_parse_date.R')
vector_parse_date_first_clean(dts = c("2018-11-01 08:30:00", "2017-09-19 08:30:00", "2017-02-28 08:30:00"), TIME_SPLIT = " ")
vector_parse_date_first_clean(dts = c("2018-11-01T08:30:00", "2017-09-19T08:30:00", "2017-02-28T08:30:00"), TIME_SPLIT = "T")
devtools::document()
rm(list = ls())
devtools::document()
